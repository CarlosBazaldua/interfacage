#include <mbed.h>
#include <threadLvgl.h>
#include "demos/lv_demos.h"
#include <cstdio>

ThreadLvgl threadLvgl(30);

DigitalOut led1(D2); //sortie pour la led Rouge
DigitalOut led2(D3); //Sortie pour la led blanche
DigitalIn capteur(A0); //Entree pour le capteur 
DigitalOut ledcarte1(LED1); //led utilisé pour faire du debug pendant le projet
Timer t; //timer utilisé pour faire du debug pendant le projet
Ticker vitesseTicker;  // Timer declaré pour calcul de vitesse
//LowPowerTicker eraseTicker;    --> pour faire du debug aussi 



//création d'une classe pour gérer les interruptions
class Counter {
public:
    Counter(PinName pin) : _interrupt(pin) {        // creation de l'interruption dans le pin A0
        _interrupt.rise(callback(this, &Counter::increment)); // on attribue la méthode à éxécuter quand l'intérruption se produisse 
    }

//Méthode qui permet d'incrémenter le compteur 
    void increment() {  
        _count++; //on augmente le compteur
        //chrono(); --> utilisé pour debug
    }
   
//Méthode qui permet de faire un reset du compteur
    void reset()  
    {
        _count=0; 
    }
//Méthode pour lire la valeur du compteur 
    int read() {
        return _count;
    }

private:
    InterruptIn _interrupt; // déclarer l'interruption 
    volatile int _count; //déclaration de la variable pour le compteur
};

Counter counter (A0); // on attribue le pin à la classe

// Fonction à executer à chaque appui sur le bouton Feu arrière 
static void btn_event_cb1 (lv_event_t * e) {
    led2 = !led2; // on inverse l'état de la led
}
// Fonction à executer à chaque appui sur le bouton
static void btn_event_cb2 (lv_event_t * e) {
    led1 = !led1; //inversion de l'état de la led
}

float vitesse; // declaration de la variable pour récuperer la vitesse
// variable qui permet d'éxecuter l'affichage une fois que le calcul de la vitesse est terminé 
volatile bool flagVitesse = false; 
//fonction pour calculer la vitesse
void calculVitesse() {
    int nbtours = counter.read(); // récuperation du nombre de tours pendant un s
    vitesse = 3.14*static_cast<float>(nbtours)*0.2 ;//calcul de la vitesse avec distance au centre du capteur = 10 cm  
    vitesse = vitesse *3.6; // conversion à des KM/h 

    flagVitesse = true; // fonction complèté 
    counter.reset();  //reset du compteur pour récuperer le nombre de tours pendant 1 s 
}

//fonction pour faire le reset 
void reset(){
    counter.reset(); // on accède à la méthode appartenant à la classe counter
}

int main() {
    // on met les leds etteintes par défaut 
    led1 = 0; 
    led2 = 0;
    
// Initialiser LVGL
    threadLvgl.lock();
// Créer un premier bouton sur l'écran pour allumer la lampe frontale 
    lv_obj_t * btn1 = lv_btn_create(lv_scr_act());
    lv_obj_set_pos(btn1, 50, 50);
    lv_obj_set_size(btn1, 120, 50);
    lv_obj_add_event_cb(btn1, btn_event_cb1, LV_EVENT_CLICKED, NULL);
    lv_obj_t * label1 = lv_label_create(btn1);
    lv_label_set_text(label1, "Frontale");
    lv_obj_center(label1);
// Créer un deuxième bouton sur l'écran pour eteindre le feu arriere
    lv_obj_t * btn2 = lv_btn_create(lv_scr_act());
    lv_obj_set_pos(btn2, 50, 150);
    lv_obj_set_size(btn2, 120, 50);
    lv_obj_add_event_cb(btn2, btn_event_cb2, LV_EVENT_CLICKED, NULL);
    lv_obj_t * label2 = lv_label_create(btn2);
    lv_label_set_text(label2, "Feu arriere");
    lv_obj_center(label2);
// label pour afficher la vitesse
    lv_obj_t *label4 = lv_label_create(lv_scr_act());
    lv_obj_set_pos(label4, 50, 210);
    threadLvgl.unlock();
// on attribue la fonction à executer une fois que le ticker arrive à 1s 
    vitesseTicker.attach(&calculVitesse, 1s);
    //eraseTicker.attach(&reset, 1100ms);
    
    while (1) {
       if (flagVitesse) { // dans le cas où on à fini de calculer la vitesse
            flagVitesse = false; // on baisse le "drapeau pour la vitesse
            threadLvgl.lock();
            lv_label_set_text_fmt(label4, "vitesse en km/h =  %f ",vitesse); // on affiche la vitesse sur l'ecran
            threadLvgl.unlock();
       }
        ThisThread::sleep_for(10ms);
    }
}

